// Generated by gencpp from file lightrover_ros/Wrc201MsgRequest.msg
// DO NOT EDIT!


#ifndef LIGHTROVER_ROS_MESSAGE_WRC201MSGREQUEST_H
#define LIGHTROVER_ROS_MESSAGE_WRC201MSGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lightrover_ros
{
template <class ContainerAllocator>
struct Wrc201MsgRequest_
{
  typedef Wrc201MsgRequest_<ContainerAllocator> Type;

  Wrc201MsgRequest_()
    : addr(0)
    , data(0)
    , length(0)
    , cmd()  {
    }
  Wrc201MsgRequest_(const ContainerAllocator& _alloc)
    : addr(0)
    , data(0)
    , length(0)
    , cmd(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _addr_type;
  _addr_type addr;

   typedef int64_t _data_type;
  _data_type data;

   typedef int8_t _length_type;
  _length_type length;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type;
  _cmd_type cmd;





  typedef boost::shared_ptr< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Wrc201MsgRequest_

typedef ::lightrover_ros::Wrc201MsgRequest_<std::allocator<void> > Wrc201MsgRequest;

typedef boost::shared_ptr< ::lightrover_ros::Wrc201MsgRequest > Wrc201MsgRequestPtr;
typedef boost::shared_ptr< ::lightrover_ros::Wrc201MsgRequest const> Wrc201MsgRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator1> & lhs, const ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator2> & rhs)
{
  return lhs.addr == rhs.addr &&
    lhs.data == rhs.data &&
    lhs.length == rhs.length &&
    lhs.cmd == rhs.cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator1> & lhs, const ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lightrover_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d13a3877d7b7aa9e3c745a3c6e744d8";
  }

  static const char* value(const ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d13a3877d7b7aa9ULL;
  static const uint64_t static_value2 = 0xe3c745a3c6e744d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lightrover_ros/Wrc201MsgRequest";
  }

  static const char* value(const ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 addr\n"
"int64 data\n"
"int8 length\n"
"string cmd\n"
;
  }

  static const char* value(const ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.addr);
      stream.next(m.data);
      stream.next(m.length);
      stream.next(m.cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Wrc201MsgRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lightrover_ros::Wrc201MsgRequest_<ContainerAllocator>& v)
  {
    s << indent << "addr: ";
    Printer<int8_t>::stream(s, indent + "  ", v.addr);
    s << indent << "data: ";
    Printer<int64_t>::stream(s, indent + "  ", v.data);
    s << indent << "length: ";
    Printer<int8_t>::stream(s, indent + "  ", v.length);
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIGHTROVER_ROS_MESSAGE_WRC201MSGREQUEST_H
